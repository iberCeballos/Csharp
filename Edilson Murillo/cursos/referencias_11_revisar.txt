Revisar
¡Lo hiciste! Las referencias no siempre son fáciles, pero aprender a usarlas desbloquea un nuevo conjunto de superpoderes en C#.

En esta lección aprendiste que:

Las clases y las interfaces son tipos de referencia . Una variable de este tipo contiene una referencia a los datos, no a los datos en sí. Esto es diferente de los tipos de valor como intybool
El operador de igualdad ( ==) usa una comparación referencial para tipos de referencia y una comparación de valor para tipos de valor
Se pueden crear múltiples referencias para un solo objeto
Una referencia y su objeto correspondiente no tienen que ser del mismo tipo. Por ejemplo, podemos hacer referencia a un objeto de subclase mediante una superclase heredada o una referencia de interfaz implementada
La funcionalidad disponible para una referencia de objeto está determinada por el tipo de referencia, no por el tipo de objeto.
El polimorfismo es la capacidad en programación para presentar la misma interfaz para diferentes tipos de datos.
Hacer referencia a un objeto por un tipo heredado o una interfaz implementada se denomina upcasting . Se puede hacer implícitamente.
Hacer referencia a un objeto mediante una clase derivada se denomina conversión descendente , que debe hacerse explícito agregando el nombre del tipo entre paréntesis. Puede causar un InvalidCastExceptionerror cuando se ejecuta el código.
Para indicar que una referencia está "vacía" o no se refiere a ningún objeto, la establecemos igual anull
Si una referencia no se establece en ningún valor, no se asigna y no puede realizar ninguna operación .
Instrucciones
En Program.cs , hay dos líneas que están comentadas:

f.Define();
bdiss3.Define();
Antes de continuar, asegúrese de poder explicar por qué cada uno de ellos provoca un error.


using System;

namespace LearnReferences
{
  class Program
  {
    static void Main(string[] args)
    {
      // Two references to the same object
      Dissertation diss1 = new Dissertation();
      Dissertation diss2 = diss1;
      diss1.CurrentPage = 31;
      diss1.Flip();
      Console.WriteLine(diss1.CurrentPage);
      Console.WriteLine(diss2.CurrentPage);
      // Both print 32

      // Referential equality when comparing reference types
      Dissertation d1 = new Dissertation(50);
      Dissertation d2 = new Dissertation(50);
      Console.WriteLine(d1 == d2);
      // Prints false

      // Value equality when comparing value types
      int int1 = 6;
      int int2 = 6;
      Console.WriteLine(int1 == int2);
      // Prints true

      // Reference to object with implemented interface
      Dissertation diss = new Dissertation(50);
      IFlippable f = diss;
      diss.Flip();
      f.Flip();
      Console.WriteLine(diss.Define());
      // This causes an error!
      // Console.WriteLine(f.Define());

      // Reference to object with inherited superclass
      Dissertation diss3 = new Dissertation(19, "Lajos Kossuth", "Shiny Happy People");
      Book bdiss3 = diss3;
      Console.WriteLine(diss3.Author);
      Console.WriteLine(bdiss3.Author);
      Console.WriteLine(diss3.Define());
      // This causes an error!
      // bdiss3.Define();

      // Arrays of references
      IFlippable[] flippers = new IFlippable[] {new Dissertation(), new Diary()};
      foreach (IFlippable flipper in flippers)
      {
        flipper.Flip();
      }
      
      // Same reference type but different behavior (using virtual/override)
      Book bdiss = new Dissertation();
      Book bk = new Book();
      Console.WriteLine(bdiss.Stringify());
      Console.WriteLine(bk.Stringify());
      // Output:
      // "This is a Dissertation object!"
      // "This is a Book object!"
      
      // Null reference
      Diary dy = null;
      // Unassigned reference
      Diary dy2;
      // Unassigned references in array
      Diary[] dys = new Diary[5];
    }
  }
}
